# -*- coding: utf-8 -*-
"""Chatmate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vglYATj9xFnfs_OoHgFV4gsVhdX6EPQs

#Wikipedia API
"""

!pip install wikipedia
import wikipedia

"""#Authenticating"""

import requests
params = {
    "grant_type": "password",
    "client_id": "3MVG9n_HvETGhr3BYBHKpD2a6jwnPLLU5LGOzt0gsIMJIm6r0.8aWhJp33TE8Q1zfMYk8YvxvS0ClrjWxRAkp", # Consumer Key
    "client_secret": "1606E962D50A2D698564E5B4DCECB1DB5EA9EBB1D0C383495E61D1A7E5AF6F99", # Consumer Secret
    "username": "zain@sydney.com", # The email you use to login
    "password": "ZMC1122zzcub2etuPXA8FtZc6dxoWFNaG" # Concat of password and security token
}
r = requests.post("https://login.salesforce.com/services/oauth2/token", params=params)
access_token = r.json().get("access_token")
instance_url = r.json().get("instance_url")
print("Access Token:", access_token)
print("Instance URL", instance_url)

"""#Salesforce API"""

import requests

def sf_api_call(action, parameters = {}, method = 'get', data = {}):
    """
    Helper function to make calls to Salesforce REST API.
    Parameters: action (the URL), URL params, method (get, post or patch), data for POST/PATCH.
    """
    headers = {
        'Content-type': 'application/json',
        'Accept': 'application/json',
        'Accept-Language': 'en-US',
        'Authorization': 'Bearer %s' % access_token
    }
    if method == 'get':
        r = requests.request(method, instance_url+action, headers=headers, params=parameters, timeout=30)
    elif method in ['post', 'patch']:
        r = requests.request(method, instance_url+action, headers=headers, json=data, params=parameters, timeout=10)
    else:
        # other methods not implemented in this example
        raise ValueError('Method should be get or post or patch.')
    print('Debug: API %s call: %s' % (method, r.url) )
    if r.status_code < 300:
        if method=='patch':
            return None
        else:
            return r.json()
    else:
        raise Exception('API error when calling %s : %s' % (r.url, r.content))

def fetch_json_url(url):
  raw_data = sf_api_call(url)
  return raw_data

#URL from front end 
data_json = fetch_json_url("/services/data/v38.0/support/knowledgeArticles")

"""#Getting JSON articles"""

import json

def flatten_json(json_data):
    out = {}
    def flatten(x, name=''):
        if type(x) is dict:
            for a in x:
                flatten(x[a], name + a + '_')
        elif type(x) is list:
            i = 0
            for a in x:
                flatten(a, name + str(i) + '_')
                i += 1
        else:
            out[name[:-1]] = x

    flatten(json_data)
    return out

articles_list = data_json.get("articles")

articles_json_list = []

for article in articles_list:

  url = article.get("url")
  data = sf_api_call(url)
  data = flatten_json(data)
  print(json.dumps(data, indent=4))
  articles_json_list.append(data)

"""#Sending data to front end"""

# payload = data_json
# r = requests.post("http://127.0.0.1:5000/", data=payload)
# print(r.text)

"""#Filtering data (hardcoded)"""

# def get_attributes(JSON):
  
#   y = json.loads(JSON)
#   ret_dict = {}

#   if y.get("id") not in ret_dict.keys():
#     ret_dict["ID"] = y.get("id")

#   list_attributes = y.get("layoutItems")

#   for attribute in list_attributes:
#     if attribute.get("label") == "Question":
#       if attribute.get("label") not in ret_dict.keys():
#         ret_dict["Question"] = attribute.get("value")
#     elif attribute.get("label") == "Answer":
#       if attribute.get("label") not in ret_dict.keys():
#         ret_dict["Answer"] = attribute.get("value")
  
#   print(ret_dict)
#   return ret_dict


# articles_simplified = []
# for article in articles_json_list:
#   x = json.dumps(article)
#   articles_simplified.append(get_attributes(x))

"""#Get attributes

Get keys mapping json from front-end using GET------
"""

def get_attributes():
  attributes = requests.get("http://127.0.0.1:5000/")
  return attributes

def extract_information(json_file, attributes):
  #print(type(json_file))
  ret_dict = {}
  #print(y)
  x = json.loads(attributes)
  #print(x)
  #print(type(x))

  for attribute in x:
    #print(attribute)
    value = json_file.get(x[attribute])
    ret_dict[attribute] = value

  return ret_dict

articles_simplified = []

x = '{"Question":"layoutItems_2_value", "Answer" : "layoutItems_3_value"}'

attributes = x

for article in articles_json_list:
  #print(article)
  #x = json.dumps(article)
  articles_simplified.append(extract_information(article, attributes))

print(articles_simplified)

"""#Elastic search"""

!pip install elasticsearch

from elasticsearch import Elasticsearch
from elasticsearch.helpers import bulk
import elasticsearch.exceptions

# Check connection!
import requests
from requests.auth import HTTPBasicAuth

dbUrl = "https://43e94a6daea349b88b7fe5df6a59e496.ap-southeast-2.aws.found.io:9243/"
res = requests.get(dbUrl, auth=HTTPBasicAuth("elastic", "GL0nVKx2szcQtBKaJVDxAOmf"))

print(res.status_code)
print(res.ok)

# Elastic search object
es = Elasticsearch([dbUrl], 
                   http_auth=('elastic', 'GL0nVKx2szcQtBKaJVDxAOmf'))

# Manual DB update
def gendata(data):
    # refids = [1,2,3]
    # topics = ["a", "b", "c"]
    # searchString = ['foo', 'bar', 'baz']
    # answers = ['foo-found', 'bar-found', 'baz-found']

    i=0
    while i < len(data):
        
        yield {
            "_index": "salesforce_kb",
            "_type": "_doc",
            "refID": "",
            "topic": "",
            "searchString": data[i].get("Question"),
            "refurl": "",
            "lastModified": "",
            "answer": data[i].get("Answer")
        }
        i+=1

# DB store/update
def add_to_db(data):
  try:
      bulk(es, gendata(data), 
          #index='TestChatmate', 
          #doc_type='clue', 
          raise_on_error=True)
  except elasticsearch.exceptions.ConnectionError:
      # TODO: Handle the error appropriately for your situation
      print("Couldn't connect to DB")
  else:
      print("record added to DB!")

#Adding articles json to elastic database 
add_to_db(articles_simplified)

"""#Chatmate interface"""

# Chatmate interface

def chatmate():
    quit = False
    print("Chatmate: Hi mate! Anything you require help with?")
    while quit == False:
        user_input = str(input('Me: '))
        ##an optional quit command
        if user_input.casefold() == 'quit' or user_input.casefold() == 'bye':
            print("Chatmate: Bye!")
            quit = True
        else:
            response = es.search(index='salesforce_kb', doc_type='_doc', body={"min_score": 3.0,  "query": {
                "match": {
                    "searchString":{
                        "query":user_input
                    }
                }
            }})

            try:
                ans = response['hits']['hits'][0]['_source']['answer']
                print("Chatmate : {}".format(ans))
            except IndexError:

                li = wikipedia.search(user_input, results=3)
                if len(li) > 0:
                  if li[0].lower() == user_input.lower():
                    print(wikipedia.summary(user_input, sentences=2, chars=0, auto_suggest=False, redirect=False))
                  else:
                    print("Chatbot: Here's the top 3 results from Wikipedia. Enter result number to search. Type exit to stop wikipedia search.")

                    #Displaying wikipedia results
                    for i in range(len(li)):
                      print(str(i + 1) + " " + li[i])
                    
                    
                    input_condition = False
                    while input_condition == False:
                      #Getting input from user
                      user_input = input('we: ')
                      if user_input.lower() == 'exit':
                        input_condition = True
                      elif user_input in ["1","2","3"]:
                        print('Chatbot: ' + wikipedia.summary(li[int(user_input)-1], sentences=2, chars=0, auto_suggest=False, redirect=False))
                        
                        
                        #add_to_db()


                        input_condition = True
                      else:
                        print("Invalid input.")

                else:
                  print("Chatbot: Can not answer that.")

chatmate()